#[Ubuntu에서 Nginx 가상 서버 2개를 설치및 구성]

1. 환경 준비
- Nginx 설치: Ubuntu 서버에 Nginx를 설치합니다.
- 가상 서버 구성: 두 개의 Nginx 가상 서버를 설정하여 각각 다른 도메인을 처리하도록 합니다.


2. Ansible 플레이북 예시
---
- name: Install and configure Nginx with 2 virtual hosts on Ubuntu
  hosts: ubuntu_servers
  become: yes
  tasks:
    # 1. Nginx 설치
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    # 2. 두 개의 가상 서버 설정 파일을 생성
    - name: Create the configuration for example1.com
      copy:
        dest: /etc/nginx/sites-available/example1.com
        content: |
          server {
              listen 80;
              server_name example1.com www.example1.com;

              root /usr/share/nginx/html/example1;
              index index.html;

              location / {
                  try_files $uri $uri/ =404;
              }
          }
    
    - name: Create the configuration for example2.com
      copy:
        dest: /etc/nginx/sites-available/example2.com
        content: |
          server {
              listen 80;
              server_name example2.com www.example2.com;

              root /usr/share/nginx/html/example2;
              index index.html;

              location / {
                  try_files $uri $uri/ =404;
              }
          }

    # 3. 가상 서버를 sites-enabled에 심볼릭 링크 생성
    - name: Enable example1.com site
      file:
        src: /etc/nginx/sites-available/example1.com
        dest: /etc/nginx/sites-enabled/example1.com
        state: link

    - name: Enable example2.com site
      file:
        src: /etc/nginx/sites-available/example2.com
        dest: /etc/nginx/sites-enabled/example2.com
        state: link

    # 4. 웹 콘텐츠 디렉토리 생성
    - name: Create directory for example1.com
      file:
        path: /usr/share/nginx/html/example1
        state: directory

    - name: Create directory for example2.com
      file:
        path: /usr/share/nginx/html/example2
        state: directory

    # 5. 각 도메인에 대한 기본 index.html 파일 생성
    - name: Create index.html for example1.com
      copy:
        dest: /usr/share/nginx/html/example1/index.html
        content: "Welcome to example1.com"
    
    - name: Create index.html for example2.com
      copy:
        dest: /usr/share/nginx/html/example2/index.html
        content: "Welcome to example2.com"

    # 6. Nginx 구문 테스트
    - name: Test nginx configuration
      command: nginx -t

    # 7. Nginx 재시작
    - name: Restart nginx
      systemd:
        name: nginx
        state: restarted
        enabled: yes


          #3.  설명
#- Nginx 설치:
  #. apt 모듈을 사용하여 Nginx를 설치합니다. update_cache 옵션을 사용하여 패키지 캐시를 업데이트합니다.

#- 가상 서버 설정:
  #. copy 모듈을 사용하여 두 개의 Nginx 가상 서버 설정 파일(example1.com과 example2.com)을 생성합니다.
#. 각 가상 서버는 server_name에 도메인 이름을 설정하고, root 디렉토리에 각 도메인별 웹 콘텐츠를 지정합니다.

#- 사이트 활성화:
  #. file 모듈을 사용하여 각 가상 서버 설정 파일을 /etc/nginx/sites-enabled/ 디렉토리로 심볼릭 링크를 만듭니다. 
#. 이를 통해 Nginx가 해당 사이트들을 활성화합니다.

#- 웹 콘텐츠 디렉토리 및 index.html 생성:
  #. 각 도메인에 해당하는 디렉토리를 생성하고, index.html 파일을 만들어 각 도메인에 표시할 콘텐츠를 정의합니다.

#- Nginx 설정 테스트:
  #. nginx -t 명령을 사용하여 Nginx 설정에 오류가 없는지 확인합니다.

#- Nginx 재시작:
  #. 설정이 완료되면 systemd를 사용하여 Nginx 서비스를 재시작하여 변경 사항을 적용합니다.


#4. 사용 방법
#<1> Ansible 인벤토리 파일 설정 
#[ubuntu_servers]
#your_ubuntu_server_ip ansible_ssh_user=your_ssh_user

#<2> 플레이북 실행
#ansible-playbook -i hosts nginx_virtual_hosts.yml

#<3> 테스트
#웹 브라우저에서 http://example1.com과 http://example2.com 확인하기
